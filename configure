#!/bin/sh
# Anticonf (tm) script by Jeroen Ooms (2020) adapted for nanonext (2022)

# set -x

# Find compiler
CC=`${R_HOME}/bin/R CMD config CC`
CFLAGS=`${R_HOME}/bin/R CMD config CFLAGS`

# Library settings
PKG_TEST_HEADER="<nng/nng.h>"
PKG_LIBS="-lnng"
if [ "$NANONEXT_TLS" ]; then
  echo "trying with TLS support"
  PKG_LIBS="$PKG_LIBS -lmbedtls -lmbedx509 -lmbedcrypto"
fi

# Detect -latomic linker flag for e.g. ARM architectures (Raspberry Pi etc.)
echo "#include <stdint.h>
uint64_t v;
int main() {
    return (int)__atomic_load_n(&v, __ATOMIC_ACQUIRE);
}" | ${CC} -x c - -o /dev/null > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "adding -latomic linker flag"
  PKG_LIBS="$PKG_LIBS -latomic"
fi

PKG_CFLAGS=""
LIB_VER="169221d"
SYS_LIB=0

# Check for custom locations
if [ "$INCLUDE_DIR" ] || [ "$LIB_DIR" ]; then
  echo "found INCLUDE_DIR and/or LIB_DIR..."
  PKG_CFLAGS="-I$INCLUDE_DIR $PKG_CFLAGS"
  PKG_LIBS="-L$LIB_DIR $PKG_LIBS"

elif [ -d "/usr/local/include/nng" ]; then
  echo "found system libnng installation..."
  PKG_CFLAGS="-I/usr/local/include $PKG_CFLAGS"
  PKG_LIBS="-L/usr/local/lib $PKG_LIBS"
  if [ -d "/usr/local/include/mbedtls" ]; then
    echo "found system mbedtls installation... using TLS support"
    PKG_LIBS="$PKG_LIBS -lmbedtls -lmbedx509 -lmbedcrypto"
  fi
  SYS_LIB=1

elif [ -d "/usr/include/nng" ]; then
  echo "found system libnng installation..."
  PKG_CFLAGS="-I/usr/include $PKG_CFLAGS"
  PKG_LIBS="-L/usr/lib $PKG_LIBS"
  if [ -d "/usr/include/mbedtls" ]; then
    echo "found system mbedtls installation... using TLS support"
    PKG_LIBS="$PKG_LIBS -lmbedtls -lmbedx509 -lmbedcrypto"
  fi
  SYS_LIB=1

elif [ -d "/usr/local/opt/nng" ]; then
  echo "found libnng Homebrew installation..."
  PKG_CFLAGS="-I/usr/local/opt/nng/include $PKG_CFLAGS"
  PKG_LIBS="-L/usr/local/opt/nng/lib $PKG_LIBS"
  if [ -d "/usr/local/opt/mbedtls" ]; then
    echo "found mbedtls Homebrew installation... using TLS support"
    PKG_LIBS="$PKG_LIBS -lmbedtls -lmbedx509 -lmbedcrypto"
  fi
  SYS_LIB=1

else
  echo "prior system libnng installation not found"
  echo "preparing to download and build library from source..."
  curl -L https://api.github.com/repos/nanomsg/nng/tarball/$LIB_VER -o nng.tar.gz
  gzip -dc nng.tar.gz | tar -xf -
  rm -f nng.tar.gz
  cd nanomsg-nng-$LIB_VER
  mkdir build
  cd build
  which cmake
  if [ $? -ne 0 ]; then
    export PATH=$PATH:/Applications/CMake.app/Contents/bin
  fi
  if [ "$NANONEXT_TLS" ]; then
    cmake -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fPIC" -DNNG_ENABLE_TLS=1 -DNNG_ELIDE_DEPRECATED=1 -DNNG_TESTS=0 -DNNG_TOOLS=0 ..
  else
    cmake -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fPIC" -DNNG_ELIDE_DEPRECATED=1 -DNNG_TESTS=0 -DNNG_TOOLS=0 ..
  fi
  cmake --build .
  cd ../..
  mkdir lib
  mv -f nanomsg-nng-$LIB_VER/build/libnng.a lib
  mv -f nanomsg-nng-$LIB_VER/include ./
  rm -rf nanomsg-nng-$LIB_VER
  PKG_CFLAGS="-I`pwd`/include $PKG_CFLAGS"
  PKG_LIBS="-L`pwd`/lib $PKG_LIBS"

fi

# For debugging
# echo "Using PKG_CFLAGS=$PKG_CFLAGS"
# echo "Using PKG_LIBS=$PKG_LIBS"

# Test for libnng
echo "#include $PKG_TEST_HEADER" | ${CC} ${PKG_CFLAGS} ${CFLAGS} -E -xc - >/dev/null 2>&1

if [ $? -ne 0 ]; then
  if [ "$SYS_LIB" -ne 1 ]; then
    echo "------------------------------[ NANONEXT ]------------------------------"
    echo "Configuration failed because 'libnng' was not found."
    echo "Automatic download and/or build also failed. Try installing:"
    echo " * deb: libnng-dev (Debian, Ubuntu, etc.)"
    echo " * rpm: nng-devel (Fedora, CentOS etc.)"
    echo " * brew: nng (MacOS)"
    echo "If 'libnng' is already installed but in a non-standard location, you"
    echo "may set INCLUDE_DIR and LIB_DIR manually via:"
    echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
    echo "-------------------------------------------------------------------------"
    exit 1
  else
    echo "Attempt to use system libnng failed"
    echo "Preparing to download and build library from source..."
    curl -L https://api.github.com/repos/nanomsg/nng/tarball/$LIB_VER -o nng.tar.gz
    gzip -dc nng.tar.gz | tar -xf -
    rm -f nng.tar.gz
    cd nanomsg-nng-$LIB_VER
    mkdir build
    cd build
    which cmake
    if [ $? -ne 0 ]; then
      export PATH=$PATH:/Applications/CMake.app/Contents/bin
    fi
    if [ "$NANONEXT_TLS" ]; then
      cmake -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fPIC" -DNNG_ENABLE_TLS=1 -DNNG_ELIDE_DEPRECATED=1 -DNNG_TESTS=0 -DNNG_TOOLS=0 ..
    else
      cmake -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fPIC" -DNNG_ELIDE_DEPRECATED=1 -DNNG_TESTS=0 -DNNG_TOOLS=0 ..
    fi
    cmake --build .
    cd ../..
    mkdir lib
    mv -f nanomsg-nng-$LIB_VER/build/libnng.a lib
    mv -f nanomsg-nng-$LIB_VER/include ./
    rm -rf nanomsg-nng-$LIB_VER
    PKG_CFLAGS="-I`pwd`/include $PKG_CFLAGS"
    PKG_LIBS="-L`pwd`/lib $PKG_LIBS"
    # Test for libnng
    echo "#include $PKG_TEST_HEADER" | ${CC} ${PKG_CFLAGS} ${CFLAGS} -E -xc - >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "------------------------------[ NANONEXT ]------------------------------"
      echo "Configuration failed because 'libnng' was not found."
      echo "Automatic download and/or build also failed. Try installing:"
      echo " * deb: libnng-dev (Debian, Ubuntu, etc.)"
      echo " * rpm: nng-devel (Fedora, CentOS etc.)"
      echo " * brew: nng (MacOS)"
      echo "If 'libnng' is already installed but in a non-standard location, you"
      echo "may set INCLUDE_DIR and LIB_DIR manually via:"
      echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
      echo "-------------------------------------------------------------------------"
      exit 1
    fi
  fi
fi

# Write to Makevars
sed -e "s|@cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" src/Makevars.in > src/Makevars

# Success
exit 0

